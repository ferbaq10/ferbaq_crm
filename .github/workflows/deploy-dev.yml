name: Deploy to EC2 (Branch)

on:
  push:
    branches:
      - develop
      - features/client      # Cambia esto por el patrón de tu rama
  workflow_dispatch:    # Permite ejecución manual opcional

env:
  DEPLOYMENT_TIMEOUT: 600  # 10 minutos timeout

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determinar rama y entorno
      run: |
        echo "RAMA_ACTUAL=${{ github.ref_name }}" >> $GITHUB_ENV
        echo "RAMA_ACTUAL_SIMPLE=$(echo '${{ github.ref_name }}' | sed 's/[^a-zA-Z0-9]/-/g')" >> $GITHUB_ENV
        echo "La rama actual es: ${{ github.ref_name }}"

    - name: Configurar SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Verificar conectividad SSH
      run: ssh -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'Conexión SSH exitosa'"

    - name: Deploy en EC2
      timeout-minutes: 10
      run: |
        ssh -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          
          BRANCH_NAME="${{ env.RAMA_ACTUAL }}"
          BRANCH_SIMPLE="${{ env.RAMA_ACTUAL_SIMPLE }}"
          PROJECT_DIR="${{ secrets.EC2_PROJECT_DIR }}/$BRANCH_SIMPLE"
          VENV_PATH="$PROJECT_DIR/venv"
          BACKUP_DIR="$PROJECT_DIR/backups"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)

          echo "Iniciando deploy de la rama: $BRANCH_NAME"
          echo "Directorio del proyecto: $PROJECT_DIR"
          
          # Crear directorio del proyecto si no existe
          mkdir -p "$PROJECT_DIR"
          cd "$PROJECT_DIR"

          # Inicializar repositorio si no existe
          if [ ! -d ".git" ]; then
            echo "Clonando repositorio por primera vez..."
            git clone ${{ secrets.REPO_URL }} . || git init .
            git remote add origin ${{ secrets.REPO_URL }} || true
          fi

          # Backup
          mkdir -p "$BACKUP_DIR"
          if [ -f "manage.py" ]; then
            tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" \
              --exclude='venv' --exclude='__pycache__' --exclude='*.pyc' \
              --exclude='logs' --exclude='backups' .
          fi

          # Actualizar código a la rama específica
          git fetch origin
          git checkout -f "$BRANCH_NAME" 2>/dev/null || git checkout -b "$BRANCH_NAME"
          git reset --hard "origin/$BRANCH_NAME"
          git clean -fd

          # Virtualenv
          [ -d "$VENV_PATH" ] || python3 -m venv "$VENV_PATH"
          source "$VENV_PATH/bin/activate"

          # Dependencias
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

          # Configuración específica por rama
          cat > .env << EOL
          DEBUG=True
          SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}'
          DATABASE_URL='${{ secrets.DATABASE_URL }}'
          ALLOWED_HOSTS='${{ secrets.ALLOWED_HOSTS }},localhost,127.0.0.1'
          CORS_ALLOWED_ORIGINS='${{ secrets.CORS_ALLOWED_ORIGINS }}'
          REDIS_URL='${{ secrets.REDIS_URL }}'
          EMAIL_HOST='${{ secrets.EMAIL_HOST }}'
          EMAIL_HOST_USER='${{ secrets.EMAIL_HOST_USER }}'
          EMAIL_HOST_PASSWORD='${{ secrets.EMAIL_HOST_PASSWORD }}'
          FRONTEND_URL='${{ secrets.FRONTEND_URL }}'
          BRANCH_NAME='$BRANCH_NAME'
          EOL
          chmod 600 .env

          # Migraciones / estáticos
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput --clear
          python manage.py check --deploy || true

          # Reinicio servicios (solo para develop)
          if [ "$BRANCH_NAME" = "develop" ]; then
            sudo systemctl daemon-reload
            sudo systemctl restart gunicorn
            sudo systemctl restart rqworker || true
            sudo systemctl is-active gunicorn || (echo "Gunicorn no está activo" && exit 1)
          else
            # Para otras ramas, iniciar servidor de desarrollo
            echo "Para ramas no-develop, inicia manualmente:"
            echo "cd $PROJECT_DIR && source venv/bin/activate && python manage.py runserver 0.0.0.0:8000"
          fi

          deactivate

          # Mantener últimos 5 backups
          cd "$BACKUP_DIR"
          ls -t backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm -f

          echo "Deploy completado exitosamente para la rama $BRANCH_NAME en $TIMESTAMP"
        EOF

    - name: Verificar deploy (solo develop)
      if: env.RAMA_ACTUAL == 'develop'
      env:
        HEALTH_URL: ${{ secrets.HEALTH_URL }}
      run: |
        echo "Esperando que el servicio responda..."
        sleep 10
        for i in {1..10}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 "$HEALTH_URL")
          if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then
            echo "Health check OK (HTTP $code) intento $i"
            curl -s --max-time 5 "$HEALTH_URL" | head -c 200 || true
            exit 0
          else
            echo "Health check falló (HTTP $code) intento $i/5"
            sleep 5
          fi
        done
        echo "Deploy verification failed"; exit 1

    - name: Deploy Summary
      if: always()
      run: |
        echo "## Deploy Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Development" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ env.RAMA_ACTUAL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project Directory**: ${{ secrets.EC2_PROJECT_DIR }}/${{ env.RAMA_ACTUAL_SIMPLE }}" >> $GITHUB_STEP_SUMMARY