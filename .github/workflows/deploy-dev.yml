name: Deploy to EC2 (Develop)

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  DEPLOYMENT_TIMEOUT: 600

jobs:
  deploy:
    name: Deploy to EC2 (develop)
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar SSH
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Verificar conectividad SSH
        shell: bash
        run: |
          set -euo pipefail
          ssh -o ConnectTimeout=10 "${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}" "echo SSH-OK"

      - name: Deploy en EC2 (solo develop)
        shell: bash
        timeout-minutes: 10
        run: |
          set -euo pipefail
          ssh -o ConnectTimeout=15 "${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}" 'bash -se' <<'REMOTE'
          set -Eeuo pipefail

          PROJECT_DIR='${{ secrets.EC2_PROJECT_DIR }}'
          VENV_PATH="$PROJECT_DIR/venv"
          BACKUP_DIR="$PROJECT_DIR/backups"
          TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
          REPO_URL="https://github.com/${{ github.repository }}.git"

          echo "Iniciando deploy (develop) en $PROJECT_DIR"
          mkdir -p "$PROJECT_DIR"

          # Backup si hay Django
          if [ -d "$PROJECT_DIR" ] && [ "$(ls -A "$PROJECT_DIR" 2>/dev/null || true)" ]; then
            mkdir -p "$BACKUP_DIR"
            if [ -f "$PROJECT_DIR/manage.py" ]; then
              echo "Backup..."
              tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" \
                --exclude='venv' --exclude='__pycache__' --exclude='*.pyc' \
                --exclude='logs' --exclude='backups' -C "$PROJECT_DIR" . 2>/dev/null || true
            fi
          fi

          cd "$PROJECT_DIR"

          # Código
          if [ ! -d ".git" ]; then
            echo "Clonando repo..."
            rm -rf .[^.]* * 2>/dev/null || true
            git clone "$REPO_URL" .
          fi
          git remote set-url origin "$REPO_URL"
          git fetch origin --prune
          git checkout -B develop origin/develop
          git clean -fd

          # venv
          echo "Config venv..."
          if [ ! -d "$VENV_PATH" ]; then
            python3 -m venv "$VENV_PATH"
          fi
          . "$VENV_PATH/bin/activate"

          # deps
          if [ ! -f "requirements.txt" ]; then
            echo "ERROR: No se encontró requirements.txt"
            exit 1
          fi
          echo "Instalando deps..."
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

          # .env: crear SOLO si NO existe
          ENV_FILE="$PROJECT_DIR/.env"
          if [ -f "$ENV_FILE" ]; then
            echo ".env ya existe, no se modifica."
          else
            echo "Creando .env..."
            umask 177
            printf "%s\n" \
          "DEBUG=True" \
          "SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}'" \
          "DATABASE_URL='${{ secrets.DATABASE_URL }}'" \
          "ALLOWED_HOSTS='${{ secrets.ALLOWED_HOSTS }},localhost,127.0.0.1'" \
          "CORS_ALLOWED_ORIGINS='${{ secrets.CORS_ALLOWED_ORIGINS }}'" \
          "REDIS_URL='${{ secrets.REDIS_URL }}'" \
          "EMAIL_HOST='${{ secrets.EMAIL_HOST }}'" \
          "EMAIL_HOST_USER='${{ secrets.EMAIL_HOST_USER }}'" \
          "EMAIL_HOST_PASSWORD='${{ secrets.EMAIL_HOST_PASSWORD }}'" \
          "FRONTEND_URL='${{ secrets.FRONTEND_URL }}'" \
          > "$ENV_FILE"
          fi
          chmod 600 "$ENV_FILE" || true

          # Exportar env
          set -a
          . "$ENV_FILE"
          set +a

          # Verificación SECRET_KEY
          python - <<'PY'
          import os, sys
          v = os.environ.get('SECRET_KEY', '')
          print('SECRET_KEY set?:', bool(v), 'len=', len(v))
          sys.exit(0 if v else 1)
          PY

          # Django
          if [ ! -f "manage.py" ]; then
            echo "ERROR: No se encontró manage.py"
            exit 1
          fi
          echo "Migraciones..."
          python manage.py migrate --noinput
          echo "Static..."
          python manage.py collectstatic --noinput --clear
          python manage.py check --deploy || true

          echo "Reiniciando servicios..."
          sudo systemctl daemon-reload
          sudo systemctl restart gunicorn
          sudo systemctl restart rqworker || true
          if ! sudo systemctl is-active --quiet gunicorn; then
            echo "ERROR: Gunicorn no está activo"
            sudo systemctl status gunicorn || true
            exit 1
          fi

          deactivate

          # Mantener últimos 5 backups
          if [ -d "$BACKUP_DIR" ]; then
            cd "$BACKUP_DIR"
            ls -t backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm -f
          fi

          echo "Deploy OK (develop) $TIMESTAMP"
          REMOTE

      - name: Verificar deploy (5 intentos)
        shell: bash
        env:
          HEALTH_URL: ${{ secrets.HEALTH_URL }}
          MAX_ATTEMPTS: 5
        run: |
          set -euo pipefail
          echo "Esperando servicio ..."
          sleep 15
          for i in $(seq 1 "$MAX_ATTEMPTS"); do
            code="$(curl -s -o /dev/null -w '%{http_code}' -L --max-time 10 "$HEALTH_URL")"
            if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then
              echo "Health OK (HTTP $code) intento $i/$MAX_ATTEMPTS"
              curl -s --max-time 5 "$HEALTH_URL" | head -c 200 || true
              exit 0
            else
              if [ "$i" -eq 1 ]; then
                echo "Primer fallo (HTTP $code). Headers:"
                curl -sSI -L --max-time 10 "$HEALTH_URL" || true
              fi
              echo "Health FAIL (HTTP $code) intento $i/$MAX_ATTEMPTS"
              sleep 10
            fi
          done
          echo "Deploy verification failed"
          exit 1

      - name: Deploy Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## Deploy Summary"
            echo "- **Environment**: Development"
            echo "- **Branch**: develop"
            echo "- **Commit**: ${{ github.sha }}"
            echo "- **Status**: ${{ job.status }}"
          } >> "$GITHUB_STEP_SUMMARY"
